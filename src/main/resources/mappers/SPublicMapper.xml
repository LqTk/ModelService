<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.social.service.dao.SPublicMapper">
  <resultMap id="BaseResultMap" type="com.social.service.domain.SPublic">
    <constructor>
      <idArg column="shareId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="userId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="userName" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="userHead" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="userSex" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="shareName" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="shareUrl" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="shareText" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="createTime" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="isPublic" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="goodsCount" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="reviewCount" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    shareId, userId, userName, userHead, userSex, shareName, shareUrl, shareText, createTime,
    isPublic, goodsCount, reviewCount
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="searchPublish">
    select
     a.shareId, a.userId, b.name as userName, b.img as userHead, b.sex as userSex, a.shareName, a.shareUrl,
     a.shareText, a.createTime, a.isPublic
     from social_public as a
     join social_user as b
    where shareId = #{shareId,jdbcType=VARCHAR} and a.userId = b.id
  </select>
  <insert id="insert" parameterType="com.social.service.domain.SPublic">
    insert into social_public (shareId, userId, userName,
      userHead, userSex, shareName,
      shareUrl, shareText, createTime,
      isPublic, goodsCount, reviewCount
      )
    values (#{shareId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR},
      #{userHead,jdbcType=VARCHAR}, #{userSex,jdbcType=INTEGER}, #{shareName,jdbcType=VARCHAR},
      #{shareUrl,jdbcType=VARCHAR}, #{shareText,jdbcType=VARCHAR}, now(),
      #{isPublic,jdbcType=INTEGER}, #{goodsCount,jdbcType=INTEGER}, #{reviewCount,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.social.service.domain.SPublic">
    insert into social_public
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="shareId != null">
        shareId,
      </if>
      <if test="userId != null">
        userId,
      </if>
      <if test="userName != null">
        userName,
      </if>
      <if test="userHead != null">
        userHead,
      </if>
      <if test="userSex != null">
        userSex,
      </if>
      <if test="shareName != null">
        shareName,
      </if>
      <if test="shareUrl != null">
        shareUrl,
      </if>
      <if test="shareText != null">
        shareText,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="isPublic != null">
        isPublic,
      </if>
      <if test="goodsCount != null">
        goodsCount,
      </if>
      <if test="reviewCount != null">
        reviewCount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="shareId != null">
        #{shareId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userHead != null">
        #{userHead,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null">
        #{userSex,jdbcType=INTEGER},
      </if>
      <if test="shareName != null">
        #{shareName,jdbcType=VARCHAR},
      </if>
      <if test="shareUrl != null">
        #{shareUrl,jdbcType=VARCHAR},
      </if>
      <if test="shareText != null">
        #{shareText,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        now(),
      </if>
      <if test="isPublic != null">
        #{isPublic,jdbcType=INTEGER},
      </if>
      <if test="goodsCount != null">
        #{goodsCount,jdbcType=INTEGER},
      </if>
      <if test="reviewCount != null">
        #{reviewCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.social.service.domain.SPublic">
    update social_public
    <set>
      <if test="userId != null">
        userId = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="userName != null">
        userName = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userHead != null">
        userHead = #{userHead,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null">
        userSex = #{userSex,jdbcType=INTEGER},
      </if>
      <if test="shareName != null">
        shareName = #{shareName,jdbcType=VARCHAR},
      </if>
      <if test="shareUrl != null">
        shareUrl = #{shareUrl,jdbcType=VARCHAR},
      </if>
      <if test="shareText != null">
        shareText = #{shareText,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createTime = now(),
      </if>
      <if test="isPublic != null">
        isPublic = #{isPublic,jdbcType=INTEGER},
      </if>
      <if test="goodsCount != null">
        goodsCount = #{goodsCount,jdbcType=INTEGER},
      </if>
      <if test="reviewCount != null">
        reviewCount = #{reviewCount,jdbcType=INTEGER},
      </if>
    </set>
    where shareId = #{shareId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.social.service.domain.SPublic">
    update social_public
    set userId = #{userId,jdbcType=VARCHAR},
      userName = #{userName,jdbcType=VARCHAR},
      userHead = #{userHead,jdbcType=VARCHAR},
      userSex = #{userSex,jdbcType=INTEGER},
      shareName = #{shareName,jdbcType=VARCHAR},
      shareUrl = #{shareUrl,jdbcType=VARCHAR},
      shareText = #{shareText,jdbcType=VARCHAR},
      createTime = now(),
      isPublic = #{isPublic,jdbcType=INTEGER},
      goodsCount = #{goodsCount,jdbcType=INTEGER},
      reviewCount = #{reviewCount,jdbcType=INTEGER}
    where shareId = #{shareId,jdbcType=VARCHAR}
  </update>

  <update id="addReviewCount" parameterType="map">
    update social_public
    set reviewCount = #{count}
    where shareId = #{shareId}
  </update>

  <update id="addGoodsCount" parameterType="map">
    update social_public
    set goodsCount = #{count}
    where shareId = #{shareId}
  </update>

  <select id="selectByShareId" parameterType="java.lang.String" resultMap="searchPublish">
    select
     a.shareId, a.userId, b.name as userName, b.img as userHead, b.sex as userSex, a.shareName, a.shareUrl,
     a.shareText, a.createTime, a.isPublic
     from social_public as a
     join social_user as b
    where shareId = #{shareId,jdbcType=VARCHAR} and a.userId = b.id
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from social_public
    where shareId = #{shareId,jdbcType=VARCHAR}
  </delete>

  <resultMap id="searchPublish" type="com.social.service.domain.PublicedEntity">
    <id column="shareId" property="shareId" jdbcType="VARCHAR" />
    <result column="userId" property="userId" jdbcType="VARCHAR" />
    <result column="userName" property="userName" jdbcType="VARCHAR" />
    <result column="userHead" property="userHead" jdbcType="VARCHAR" />
    <result column="userSex" property="userSex" jdbcType="INTEGER" />
    <result column="shareName" property="shareName" jdbcType="VARCHAR" />
    <result column="shareUrl" property="shareUrl" jdbcType="VARCHAR" />
    <result column="shareText" property="shareText" jdbcType="VARCHAR" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="isPublic" property="isPublic" jdbcType="INTEGER" />
  <!--   publishId 为查询 findRoleById 的入参, id 和 role_status 为查询 findUsers 的结果信息
     如果查询 findByGoodsId 需要 roleId 作为入参, column 写法 {userId=id,roleStatus=role_status,roleId=role_id} -->
    <collection property="goodsList" javaType="java.util.ArrayList" ofType="com.social.service.domain.Goods"
                select="findByGoodsId" column="shareId"/>
    <collection property="reviewEntities" ofType="com.social.service.domain.ReviewEntity"
                select="findByReviewId" column="shareId"/>
  </resultMap>

  <select id="findByGoodsId" resultType="com.social.service.domain.Goods">
    select a.goodsId as goodsId, a.peopleId as peopleId, a.publicId as publicId, b.name as peopleName, b.img as peopleHead, a.goodsTime
    from social_goods as a join social_user as b
    where a.publicId=#{selectId} and b.id = a.peopleId order by a.goodsTime asc
  </select>

  <resultMap id="myReviewMap" type="com.social.service.domain.ReviewEntity">
    <id column="reviewId" property="reviewId" jdbcType="VARCHAR"/>
    <result column="peopleId" property="peopleId" jdbcType="VARCHAR"/>
    <result column="publishId" property="publishId" jdbcType="VARCHAR"/>
    <result column="reviewText" property="reviewText" jdbcType="VARCHAR"/>
    <result column="peopleName" property="peopleName" jdbcType="VARCHAR"/>
    <result column="reviewTime" property="reviewTime" jdbcType="TIMESTAMP"/>
    <collection property="chatReviewList" javaType="java.util.ArrayList" ofType="com.social.service.domain.ChatReviewEntity"
                select="findChatReview" column="reviewId"/>
  </resultMap>

  <select id="findChatReview" resultType="com.social.service.domain.ChatReviewEntity">
    select a.reviewChatId, a.reviewId, a.talkId, a.toId, b.name as talkName, c.name as toName, a.chatText, a.chatTime
    from social_chat_review as a join social_user as b join social_user as c
    where reviewId=#{reviewId} and b.id=a.talkId and c.id=a.toId order by a.chatTime asc
  </select>

  <select id="findByReviewId" resultMap="myReviewMap">
    select a.reviewId as reviewId, a.peopleId as peopleId, a.publicId as publishId,a.reviewText as reviewText, b.name as peopleName, a.reviewTime
    from social_review as a join social_user as b
    where a.publicId=#{selectId} and b.id=a.peopleId order by a.reviewTime asc
  </select>

  <select id="getSocialPublicSize" resultMap="searchPublish">
    select
     a.shareId, a.userId, b.name as userName, b.img as userHead, b.sex as userSex, a.shareName, a.shareUrl,
     a.shareText, a.createTime, a.isPublic
     from social_public as a
     join social_user as b
     where a.userId = b.id
     order by rand() limit 10
  </select>

  <select id="getSocialByUserId" parameterType="map" resultMap="searchPublish">
    select a.shareId,a.userId,b.name as userName, b.img as userHead, b.sex as userSex, a.shareName,a.shareUrl,
     a.shareText,a.createTime,a.isPublic
     from social_public as a
     join social_user as b
      where a.userId=#{userId} and b.id=#{userId}
      limit #{start},#{end}
  </select>

  <update id="updataHeadImg" parameterType="map">
    update social_public
    set userHead = #{imghead}
    where userId = #{userId}
  </update>
</mapper>
