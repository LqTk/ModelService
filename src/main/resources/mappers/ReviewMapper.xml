<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.social.service.dao.ReviewMapper">
  <resultMap id="BaseResultMap" type="com.social.service.domain.Review">
    <constructor>
      <idArg column="reviewId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="peopleId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="publicId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="reviewText" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="reviewTime" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    reviewId, peopleId, publicId, reviewText, reviewTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from social_review
    where reviewId = #{reviewId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from social_review
    where reviewId = #{reviewId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.social.service.domain.Review">
    insert into social_review (reviewId, peopleId, publicId,
      reviewText,reviewTime)
    values (#{reviewId,jdbcType=VARCHAR}, #{peopleId,jdbcType=VARCHAR}, #{publicId,jdbcType=VARCHAR},
      #{reviewText,jdbcType=VARCHAR},now())
  </insert>
  <insert id="insertSelective" parameterType="com.social.service.domain.Review">
    insert into social_review
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="reviewId != null">
        reviewId,
      </if>
      <if test="peopleId != null">
        peopleId,
      </if>
      <if test="publicId != null">
        publicId,
      </if>
      <if test="reviewtext != null">
        reviewText,
      </if>
      reviewTime,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="reviewId != null">
        #{reviewId,jdbcType=VARCHAR},
      </if>
      <if test="peopleId != null">
        #{peopleId,jdbcType=VARCHAR},
      </if>
      <if test="publicId != null">
        #{publicId,jdbcType=VARCHAR},
      </if>
      <if test="reviewtext != null">
        #{reviewText,jdbcType=VARCHAR},
      </if>
      now(),
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.social.service.domain.Review">
    update social_review
    <set>
      <if test="peopleId != null">
        peopleId = #{peopleId,jdbcType=VARCHAR},
      </if>
      <if test="publicId != null">
        publicId = #{publicId,jdbcType=VARCHAR},
      </if>
      <if test="reviewtext != null">
        reviewText = #{reviewText,jdbcType=VARCHAR},
      </if>
      reviewTime = now(),
    </set>
    where reviewId = #{reviewId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.social.service.domain.Review">
    update social_review
    set peopleId = #{peopleId,jdbcType=VARCHAR},
      publicId = #{publicId,jdbcType=VARCHAR},
      reviewText = #{reviewText,jdbcType=VARCHAR},
      reviewTime = now(),
    where reviewId = #{reviewId,jdbcType=VARCHAR}
  </update>



  <resultMap id="myReviewMap" type="com.social.service.domain.ReviewEntity">
    <id column="reviewId" property="reviewId" jdbcType="VARCHAR"/>
    <result column="peopleId" property="peopleId" jdbcType="VARCHAR"/>
    <result column="publishId" property="publishId" jdbcType="VARCHAR"/>
    <result column="reviewText" property="reviewText" jdbcType="VARCHAR"/>
    <result column="peopleName" property="peopleName" jdbcType="VARCHAR"/>
    <result column="reviewTime" property="reviewTime" jdbcType="TIMESTAMP"/>
    <collection property="chatReviewList" javaType="java.util.ArrayList" ofType="com.social.service.domain.ChatReviewEntity"
                select="findChatReview" column="reviewId"/>
  </resultMap>

  <select id="findChatReview" resultType="com.social.service.domain.ChatReviewEntity">
    select a.reviewChatId, a.reviewId, a.talkId, a.toId, b.name as talkName, c.name as toName, a.chatText, a.chatTime
    from social_chat_review as a join social_user as b join social_user as c
    where a.reviewId=#{reviewId} and b.id=a.talkId and c.id=a.toId order by a.chatTime desc
  </select>

  <select id="selectByReviewId" resultMap="myReviewMap">
    select a.reviewId, a.peopleId, a.publicId, a.reviewText, b.name as peopleName, a.reviewTime
    from social_review as a join social_user as b
    where a.reviewId=#{reviewId} and b.id=a.peopleId
  </select>

  <delete id="deleteByShareId" parameterType="java.lang.String">
    delete from social_review
    where publicId = #{pbId,jdbcType=VARCHAR}
  </delete>

  <select id="selectByPbId" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from social_review
    where publicId = #{pbId,jdbcType=VARCHAR}
  </select>
</mapper>
